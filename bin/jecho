#!/usr/bin/env node

/* Jecho server by Claudio Cicali <claudio.cicali@gmail.com>
 * Released under the MIT license
 * See also https://github.com/claudioc/jecho/blob/master/README.md
 */

var http = require('http')
  , util = require("util")
  , program
  , JechoClient = require('../lib/JechoClient').JechoClient
  , Readliner = require('../lib/Readliner').Readliner
  , ConnectionServer = require('../lib/wswrapper').ConnectionServer;

require('../lib/color');

try {
  program = require('commander');
} catch(e) {
  console.log("You probably need to install the following modules: commander");
  console.log("Locally with `npm install commander` or globally with `sudo npm install -g commander`");
  process.exit(1);
}

var version = "0.1.10";

program
  .version(version)
  .option('-p, --port <n>', 'Port to listen to, defaults to 6767')
  .option('-x, --xhr', 'Bypass WebSocket and use only XHR with CORS')
  .option('-i, --info', 'Output program informations')
  .parse(process.argv);

if (program.info) {
  console.log("\njecho is a remote JavaScript debugger");
  console.log("\nThe author is Claudio Cicali <claudio.cicali@gmail.com>");
  console.log("\nThe github repository is https://github.com/claudioc/jecho");
  console.log("\nIn your web page: <script src=\"http://<the jecho server IP address and port - not 127.0.0.1>/jecho.js\"></script>");
  console.log("\nThanks for using jecho.\n");
  process.exit(0);
}

function main() {

  var port = program.port || 6767;

  var clients = [];
  var currentClient = null;

  var prompto = null;
  var useNL = false;

  var rl = new Readliner();

  rl.setPrompt("(0)> ");

  var httpServer = http.createServer(function (request, response) {

    var content = ""
      , status = 200
      , mime = 'text/html'
      , ua = request.headers['user-agent'];

    switch (request.url) {

      case '/':
        content = "Welcome";
        break;

      // If not supporting websocket...
      case '/log':
        var body = '';
        request.on('data', function (data) {
          body += data;
        });
        request.on('end', function () {
          output(decodeMsg(body), request.connection.remoteAddress);
        });
        break;

      case '/jecho.js':
        JechoClient.useXHR = !!program.xhr;
        JechoClient.version = "\"" + version + "\"";
        content = JechoClient._toJavaScript();
        mime = "text/javascript";
        break;

      default:
        content = "Page not found";
        status = 404;
        break;

    }

    response.writeHead(status, { 'Content-Type': mime, "Access-Control-Allow-Origin": "*" });
    response.end(content, 'utf-8');

  }).listen(port);

  httpServer.on("error", function(e) {
    console.log(e.toString())
    process.exit(1);
  })

  var server = new ConnectionServer({httpServer: httpServer});

  server.on('connection', function(conn) {

    clients.push(conn);

    currentClient = conn;

    output("New " + conn.specs + " WebSocket client connected (" + conn.remoteAddress + ")");

    conn.on('message', function(msg) {

      currentClient = conn;

      output(decodeMsg(msg), conn.remoteAddress);

    });

    conn.on('close', function() {

      output("Client " + currentClient.remoteAddress + " disconnected");

      // Current client is about to close. Find another one
      if (currentClient == conn) {
        currentClient = null;
      }

      for (var i=0; i < clients.length; i++) {
        if (clients[i] == conn) {
          clients.splice(i,1);
          break;
        }
      }

      if (clients.length > 0) {
        currentClient = clients[0];
      }

      prompt(false);

    });

  });

  rl.on("line", function(line) {

    if ("" == line.trim()) {
      prompt(false);
      return;
    }

    if (program.xhr) {
      output("Using XHR: sorry, cannot send.");
      prompt(false);
      return;
    }

    prompt(true);

    if (currentClient) {
      currentClient.send( '! ' + line );
    }

  });

  setTimeout(function() {
    rl.start();
  }, 100);

  output('Starting Jecho server on port ' + port + '...');

  function prompt(whiny) {
    var n = clients.length;
    if (!currentClient && whiny) {
      output("I feel alone...");
    }
    rl.setPrompt("(" + n + ( n > 0 ? (":" + currentClient.remoteAddress) : '' ) + ")> ");
    rl.prompt();
    useNL = true;
  }

  function output(msg, subject) {

    if (!subject) {
      subject = "<System>";
    }

    var dir, text;

    if (typeof msg === 'string' || typeof msg === 'undefined') {
      dir = '--';
      text = msg;
    } else {
      switch ( msg.type ) {

        case '!':
          dir = '<>';
          text = JSON.stringify(msg.data, undefined, 2);
          break;

        case 'l':
          dir = '>>';
          text = "#" + msg.id + " - " + JSON.stringify(msg.data, undefined, 2);
          break;

        case 'e':
          dir = '>!';
          text = msg.data;
          break;

        default:
          dir = '??';
          text = "" + msg.data;
          break;

      }

    }
    if (typeof text == 'undefined') {
      text = "";
    }

    var d = (new Date()).toString().match(/\d+:\d+:\d+/)[0].color('white');

    util.print((useNL ? "\n" : "") + d + " - " + subject.color("cyan") + " " + dir + " " + text.color("yellow") + "\n");

    clearTimeout(prompto);
    prompto = setTimeout(function() {
      prompt(false);
    }, 500);
    useNL = false;
  }

  function decodeMsg(msg) {
    var payload;
    try {
      payload = JSON.parse(msg);
    } catch(e) {
      payload = 'ERR: decoding message';
    }
    return payload;
  }

}

main();
